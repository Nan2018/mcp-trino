name: Release

on:
  workflow_run:
    workflows: ["Main Workflow"]
    branches: [main]
    types:
      - completed

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"
          cache: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release

      - name: Extract version from git tag
        id: extract_version
        if: steps.semantic.outcome == 'success'
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Released version: $VERSION"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        if: steps.extract_version.outcome == 'success'
        with:
          version: v1.18.2
          distribution: goreleaser
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GORELEASER_CURRENT_TAG: v${{ steps.extract_version.outputs.version }}

      # Fallback manual release in case of failure
      - name: Build Binaries Manually (Fallback)
        id: manual_build
        if: failure() && steps.extract_version.outcome == 'success'
        run: |
          echo "GoReleaser may have failed, building binaries manually as fallback"
          mkdir -p dist/binaries
          GOOS=linux GOARCH=amd64 go build -o dist/binaries/mcp-trino-linux-amd64 ./cmd/server
          GOOS=darwin GOARCH=amd64 go build -o dist/binaries/mcp-trino-darwin-amd64 ./cmd/server
          GOOS=windows GOARCH=amd64 go build -o dist/binaries/mcp-trino-windows-amd64.exe ./cmd/server
          cd dist/binaries
          tar -czf mcp-trino-linux-amd64.tar.gz mcp-trino-linux-amd64
          tar -czf mcp-trino-darwin-amd64.tar.gz mcp-trino-darwin-amd64
          zip mcp-trino-windows-amd64.zip mcp-trino-windows-amd64.exe
          cd ../..
          echo "manual_build=true" >> $GITHUB_OUTPUT

      - name: Create Manual GitHub Release (Fallback)
        if: steps.manual_build.outputs.manual_build == 'true'
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ steps.extract_version.outputs.version }}
          name: Release v${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            dist/binaries/mcp-trino-linux-amd64.tar.gz
            dist/binaries/mcp-trino-darwin-amd64.tar.gz
            dist/binaries/mcp-trino-windows-amd64.zip
